<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">


<configuration>
    <!--
    1、MyBatis可以使用properties来引入外部properties配置文件内容：
        resource:引入类路径下的资源
        url:引入网络路径下的或者磁盘路径下的资源
    -->
    <properties resource="jdbc.properties"/>

    <!--
    2、setting包含很多重要的设置项
        setting用来设置每一个设置项
            name：设置项名
            value：设置项取值
    -->
    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!--可以使用延迟加载（懒加载）；（按需加载）
                Employee==>Dept;
            我们每次查询Employee对象的时候，都将一起查询出来
            部门信息在我们使用的时候再去查询；
            分段查询的基础之上再加两个配置；
        -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="false"/>
        <setting name="cacheEnabled" value="true"/>
    </settings>

    <!--
    3、typeAliases别名处理器，可以为我们的java类型起别名(别名不区分大小写)
        1.typeAlias方法
            type：指定要起别名的全类名，默认别名是类名小写
            alias：指定的别名
        2.packages方法（为某个包下批量起别名）：批量起别名的情况下可使用@Alias注解为某个类型指定新的别名
            name：指定包名
    -->
    <typeAliases>
        <!--<typeAlias type="com.Employee" alias="user"/>-->
        <package name="com.project.bean"/>
    </typeAliases>

    <!--
    4、类型处理器（为java类型和数据库类型建立桥梁）
    -->
    <typeHandlers>

    </typeHandlers>

    <!--
    5、插件
    -->
    <plugins>
        <plugin interceptor="com.github.pagehelper.PageInterceptor"/>
    </plugins>
    <!--
    6、environments：环境，mybatis可以配置多种环境，default指定使用某种环境，可以达到快速切换环境
            environment:配置一个具体的环境信息。必须有两个标签；id代表当前环境的唯一标签
                transactionManager：事务管理器
                    type：事务管理器的类型：JDBC（JdbcTransactionFactory）|MANAGED
                dataSource：数据源
                    type:数据源类型：UNPOOLED（UnpooledDataSourceFactory.class）|POOLED（PooledDataSourceFactory.class）|JNDI（JndiDataSourceFactory.class）
                自定义数据源：实现DataSourceFactory接口，type是全类名
    -->
    <environments default="development">
        <!--开发环境-->
        <environment id="development">
            <transactionManager type="JDBC" />
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>


        <!--测试环境-->
        <environment id="test">
            <transactionManager type="JDBC" />
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--
    7、支持多数据厂商的sql语句
        type="DB_VENDOR"(VendorDatabaseIdProvider.class)
            作用就是得到数据库厂商的标识(驱动)，mybati能通过不同的数据库厂商标识发出不同的sql语句
                比如：MySQL,Oracle,SQL,Server,xxxx

    -->
    <databaseIdProvider type="DB_VENDOR">
        <!--为不同的数据库厂商起别名-->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlServer"/>
    </databaseIdProvider>
    <!--
    7、mappers：将sql映射到全局配置中
        mapper注册一个sql映射
            注册配置文件
            resource:引用类路径下的sql映射文件
                mybatis/mapper/EmployeeMapper.xml
            url：引用网路路径或者磁盘路径下的sql映射文件
                file:///var/mappers/AuthorMapper.xml

            注册接口
            class:引用（注册）接口
                1、有sql映射文件，映射文件必须和接口同名，并且放在与接口同一目录下
                2、没有sql映射文件，所有的sql都是利用注解写在接口上
                推荐：
                    重要的，复杂的Dao接口使用sql映射文件
                    不重要，简单的Dao接口为了开发快速可以使用注解
    -->
    <!--将我们写好的sql映射文件注册到全局配置文件中-->


</configuration>